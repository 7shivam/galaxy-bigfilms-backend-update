# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the main branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: cybage-devops
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  REGISTRY_HOSTNAME: gcr.io
  GKE_CLUSTER: istio-cluster    # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: galaxybackend  #  TODO: update to deployment name
  REPOSITORY: tvc-ctg # TODO: update to Artifact Registry docker repository
  IMAGE: galaxy-backend

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    

     # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0
      with:
        service_account_key: ${{ secrets.MY_GH_TOKEN }}
        project_id: ${{ env.PROJECT_ID }}

    

    - run: |-
        gcloud --quiet auth configure-docker
        
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.MY_GH_TOKEN }}

    # Build the Docker image
    - name: Build
      run: |-
         docker build \
          --tag "$REGISTRY_HOSTNAME"/"$PROJECT_ID"/"$IMAGE":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        # docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
        docker push $REGISTRY_HOSTNAME/$PROJECT_ID/$IMAGE:$GITHUB_SHA
    
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        cd kubernetes/
        sed -i -e 's/REGISTRY_HOSTNAME/'"$REGISTRY_HOSTNAME"'/' ./backend.yaml
        sed -i -e 's/PROJECT_ID/'"$PROJECT_ID"'/' ./backend.yaml
        sed -i -e 's/IMAGE/'"$IMAGE"'/' ./backend.yaml
        sed -i -e 's/GITHUB_SHA/'"$GITHUB_SHA"'/' ./backend.yaml
        kubectl apply -f  backend.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
